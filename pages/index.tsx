import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { gql } from "@apollo/client";
import client from "../apollo-client";

type HomeProps = {
  discussions: [Discussion];
};

const Home: NextPage<HomeProps> = ({ discussions }) => {
  return (
    <div className={styles.container}>
      <Head>
        <title>Discussion Tools</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <p className={styles.description}>
          Get started by editing{" "}
          <code className={styles.code}>pages/index.tsx</code>
        </p>

        <div className={styles.grid}>
          {discussions.map((discussion: Discussion) => (
            <div key={discussion.id} className={styles.card}>
              <a href={discussion.url} target="_blank" rel="noreferrer">
                <h3>{discussion.title}</h3>
                <p>
                  {discussion.number} - {discussion.title}
                </p>
                <p>Updated: {discussion.updatedAt}</p>
              </a>
            </div>
          ))}
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

type Discussion = {
  title: string;
  id: string;
  number: string;
  url: string;
  updatedAt: Date;
  category: {
    id: string;
    name: string;
  };
};

export async function getServerSideProps() {
  let today = new Date();
  const offset = today.getTimezoneOffset();
  today = new Date(today.getTime() - offset * 60 * 1000);
  const dateString = today.toISOString().split("T")[0];
  console.log("date string", dateString);

  let query = `repo:vercel/community updated:${dateString} sort:updated`;
  const { data } = await client.query({
    query: gql`
      query Discussions($query: String!) {
        discussions: search(query: $query, type: DISCUSSION, first: 20) {
          edges {
            node {
              ... on Discussion {
                id
                number
                url
                title
                createdAt
                updatedAt
                author {
                  login
                  url
                }
                category {
                  id
                  name
                  description
                }
                comments(first: 20) {
                  edges {
                    cursor
                    node {
                      id
                      createdAt
                      author {
                        login
                        url
                      }
                      authorAssociation
                      isAnswer
                    }
                  }
                }
              }
            }
          }
        }
      }
    `,
    variables: { query },
  });

  const discussions = data.discussions.edges.map((edge) => {
    const dateUpdated = new Date(edge.node.updatedAt);
    const updatedAt = dateUpdated.toLocaleDateString(undefined, {
      dateStyle: "long",
    });
    return {
      title: edge.node.title,
      id: edge.node.id,
      number: edge.node.number,
      url: edge.node.url,
      updatedAt,
      category: {
        id: edge.node.category.id,
        name: edge.node.category.name,
      },
    };
  });

  return {
    props: {
      discussions,
    },
  };
}

export default Home;
