import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useState, useEffect } from "react";

type HomeProps = {
  discussions: Discussion[];
  labels: Label[];
};

function getDates() {
  let today = new Date();
  const dayOfWeek = today.getDay();
  const difference = today.getDate() - dayOfWeek;
  let sunday = new Date(today);
  sunday.setDate(difference);
  let saturday = new Date(sunday);
  saturday.setDate(sunday.getDate() + 6);
  const dateString = today.toISOString().split("T")[0];
  const startDate = sunday.toISOString().split("T")[0];
  const endDate = today.toISOString().split("T")[0];

  const lastWeekStartDate = new Date(sunday);
  lastWeekStartDate.setDate(sunday.getDate() - 7);
  const lastWeekEndDate = new Date(sunday);
  lastWeekEndDate.setDate(sunday.getDate() - 1);

  return {
    startDate,
    endDate,
    lastWeekStartDate,
    lastWeekEndDate,
  };
}
const dates = getDates();

const Home: NextPage<HomeProps> = () => {
  const [labels, setLabels] = useState<Label[]>([]);
  const [categories, setCategories] = useState<Category[]>([]);
  const [discussions, setDiscussions] = useState<Discussion[]>([]);
  const [displayDiscussions, setDisplayDiscussions] = useState<Discussion[]>(
    []
  );
  const [isLoading, setLoading] = useState<Boolean>(false);
  const [startDate, setStartDate] = useState<string>(dates.startDate);
  const [endDate, setEndDate] = useState<string>(dates.endDate);
  const [discussionCounts, setDiscussionCounts] = useState<Counts>();

  useEffect(() => {
    setLoading(true);

    fetchData().catch(console.error);
  }, []);

  const fetchData = async (start = startDate, end = endDate) => {
    let responses = await Promise.allSettled([
      fetch(
        `http://localhost:3000/api/discussions?startDate=${start}&endDate=${end}`
      ),
      fetch(`http://localhost:3000/api/labels`),
    ]);
    let discussions =
      responses[0].status === "fulfilled"
        ? await (responses[0] as PromiseFulfilledResult<Response>).value.json()
        : [];
    let attr =
      responses[1].status === "fulfilled"
        ? await (responses[1] as PromiseFulfilledResult<Response>).value.json()
        : [];

    setDiscussions(discussions);
    setDisplayDiscussions(discussions);
    setLabels(attr?.labels);
    setCategories(attr?.categories);
    setLoading(false);

    //calculateDiscussionCounts(discussions, attr?.labels);
  };

  let getFirstResponseCount = () => {
    // quickly, but not-necessarily-reliably, count first comments that came from me
    return discussions.filter((d) => {
      return (
        d?.comments.length &&
        d.comments[0].author.login === "amyegan" &&
        d.comments[0].author.login !== d.author.login
      );
    }).length;
  };

  let handleSubmit = (event: any) => {
    event.preventDefault();

    let allDiscussions = discussions;
    let selectedLabel = event.target.githubLabel.value;
    let selectedCategory = event.target.githubCategory.value;
    let start = event.target.githubStartDate.value;
    let end = event.target.githubEndDate.value;

    if (start != startDate || end != endDate) {
      setStartDate(start);
      setEndDate(end);
      fetchData(start, end);
    }

    if (selectedLabel) {
      allDiscussions = discussions.filter((discussion) => {
        return discussion.labels.some((l) => l.name === selectedLabel);
      });
    }

    if (selectedCategory) {
      allDiscussions = discussions.filter((discussion) => {
        return discussion.category.name === selectedCategory;
      });
    }

    setDisplayDiscussions(discussions);
  };

  if (isLoading) return <p>Loading...</p>;

  return (
    <div className={styles.container}>
      <Head>
        <title>Discussion Tools</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title} style={{ marginBottom: "0.5em" }}>
          Welcome!
        </h1>

        <p>
          {discussions.length} discussions from {startDate} through {endDate}
        </p>

        <div style={{ paddingBottom: "2em" }}>
          <>
            Marked &quot;answered&quot; this week:{" "}
            {
              discussions.filter((d) => {
                if (d.answerChosenAt) {
                  const answerDate = new Date(d.answerChosenAt);
                  return (
                    answerDate >= new Date(startDate) &&
                    answerDate <= new Date(endDate)
                  );
                }
              }).length
            }
          </>
        </div>

        <form
          style={{ marginBottom: "2em" }}
          onSubmit={(e) => {
            handleSubmit(e);
          }}
        >
          <div style={{ marginBottom: "0.5em" }}>
            <label htmlFor="githubLabel">Label filter </label>
            <select name="label" id="githubLabel">
              <option value="">--Please choose an option--</option>
              {labels &&
                labels.map((label) => (
                  <option value={label.name} key={label.id}>
                    {label.name}
                  </option>
                ))}
            </select>
          </div>

          <div style={{ marginBottom: "0.5em" }}>
            <label htmlFor="githubCategory">Category filter </label>
            <select name="category" id="githubCategory">
              <option value="">--Please choose an option--</option>
              {categories &&
                categories.map((category) => (
                  <option value={category.name} key={category.id}>
                    {category.name}
                  </option>
                ))}
            </select>
          </div>

          <div style={{ marginBottom: "0.5em" }}>
            <label>
              Start date ({startDate})
              <input
                type="date"
                defaultValue={startDate}
                id="githubStartDate"
                name="start-date"
              ></input>
            </label>
          </div>

          <div style={{ marginBottom: "0.5em" }}>
            <label>
              End date ({endDate})
              <input
                type="date"
                defaultValue={endDate}
                id="githubEndDate"
                name="end-date"
              ></input>
            </label>
          </div>

          <button type="submit">Search</button>
        </form>

        <div className={styles.grid}>
          {displayDiscussions.map((discussion) => (
            <div key={discussion.id} className={styles.card}>
              <a href={discussion.url} target="_blank" rel="noreferrer">
                <h3>{discussion.title}</h3>
                <p>
                  {discussion.number} - {discussion.title}
                </p>
                <p>{`Updated: ${discussion.updatedAt}`}</p>
                <p>{`Answered: ${Boolean(discussion.answerChosenAt)}`}</p>
                <p>{`Comment count: ${discussion.comments.length}`}</p>
                <div>
                  <ul>
                    {discussion?.labels?.length > 0 &&
                      discussion.labels.map((label) => (
                        <li key={label.id}>{label.name}</li>
                      ))}
                  </ul>
                </div>
              </a>
            </div>
          ))}
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

type Discussion = {
  title: string;
  id: string;
  author: {
    login: string;
    url: string;
  };
  number: string;
  url: string;
  createdAt: Date;
  updatedAt: Date;
  answerChosenAt?: Date;
  labels: Array<Label>;
  category: {
    id: string;
    name: string;
  };
  comments: Comment[];
};

type Label = { id: string; name: string; description: string };
type Category = { id: string; name: string; description: string; slug: string };

type Comment = {
  author: {
    login: string;
    url: string;
  };
  createdAt: Date;
  id: string;
  publishedAt: Date;
  url: string;
};

type Counts = {
  labels: { name: string; id: string; count: number }[];
  categories: { id: string; name: string; count: number }[];
};

export default Home;
